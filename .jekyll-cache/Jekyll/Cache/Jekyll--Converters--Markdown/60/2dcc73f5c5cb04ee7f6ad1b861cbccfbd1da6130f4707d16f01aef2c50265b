I"!<p>在后端相关岗位的入职面试中，三次握手的出场频率非常的高，甚至说它是必考题也不为过。一般的答案都是说客户端如何发起 SYN 握手进入 SYN_SENT 状态，服务器响应 SYN 并回复 SYNACK，然后进入 SYN_RECV，…… , 吧啦吧啦诸如此类。<br />
但我今天想给出一份不一样的答案。其实三次握手在内核的实现中，并不只是简单的状态的流转，还包括半连接队列、syncookie、全连接队列、重传计时器等关键操作。如果能深刻理解这些，你对线上把握和理解将更进一步。如果有面试官问起你三次握手，相信这份答案一定能帮你在面试官面前赢得非常多的加分。<br />
在基于 TCP 的服务开发中，三次握手的主要流程图如下。 
<img src="images/404-bg.png" width="30" height="30" /><br />
服务器中的核心代码是创建 socket，绑定端口，listen 监听，最后 accept 接收客户端的请求。</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//服务端核心代码
int main(int argc, char const *argv[])
{
 int fd = socket(AF_INET, SOCK_STREAM, 0);
 bind(fd, ...);
 listen(fd, 128);
 accept(fd, ...);
 ...
}
</code></pre></div></div>
<p>客户端的相关代码是创建 socket，然后调用 connect 连接 server。</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//客户端核心代码
int main(){
 fd = socket(AF_INET,SOCK_STREAM, 0);
 connect(fd, ...);
 ...
}
</code></pre></div></div>
<p>围绕这个三次握手图，以及客户端，服务端的核心代码，我们来深度探索一下三次握手过程中的内部操作。我们从和三次握手过程关系比较大的 listen 讲起！
友情提示：本文中内核源码会比较多。如果你能理解的了更好，如果觉得理解起来有困难，那直接重点看本文中的描述性的文字，尤其是加粗部分的即可。另外文章最后有一张总结图归纳和整理了全文内容。
一、服务器的 listen</p>
:ET